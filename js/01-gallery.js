// 1. Створення і рендер розмітки на підставі масиву даних galleryItems і наданого шаблону елемента галереї.
// 2. Реалізація делегування на ul.gallery і отримання url великого зображення.
// 3. Підключення скрипту і стилів бібліотеки модального вікна basicLightbox. Використовуй CDN сервіс jsdelivr і додай у проект посилання на 
// мініфіковані (.min) файли бібліотеки.
// 4. Відкриття модального вікна по кліку на елементі галереї. Для цього ознайомся з документацією і прикладами.
// 5. Заміна значення атрибута src елемента <img> в модальному вікні перед відкриттям. Використовуй готову розмітку модального вікна із 
// зображенням з  прикладів бібліотеки basicLightbox.

import { galleryItems } from './gallery-items.js';
// Change code below this line
const galleryContainer = document.querySelector(".gallery");
const itemsMarkup = createGalleryItemsMarkup(galleryItems);


//Метод insertAdjacentHTML() - Сучасний метод для додавання рядка з HTML-тегами перед, після або всередину елемента. 
//Вирішує проблему innerHTML з повторною серіалізацією вмісту елемента під час додавання розмітки до вже існуючої.
galleryContainer.insertAdjacentHTML("beforeend", itemsMarkup); //"beforeend" - всередині elem, після усіх дітей
galleryContainer.addEventListener("click", onImgClick);
//Метод addEventListener() - Додає слухача події на елемент. 
    //element.addEventListener(event, handler, options);
        // event - ім'я події, рядок, наприклад "click".
        // handler - колбек-функція, яка буде викликана під час настання події.
        // options - необов'язковий об'єкт параметрів з розширеними налаштуваннями.

//У функції createGalleryItemsMarkup(item) параметр item є масив (array). Він використовується всередині функції для
//створення HTML-розмітки або тексту на основі даних, що зберігаються в цьому масиві.
//Точне призначення та дії функції createGalleryItemsMarkup будуть залежати від контексту та коду,
//в якому вона використовується. Код, що викликає, повинен надати масив item, який функція createGalleryItemsMarkup буде
//обробляти і створювати відповідну розмітку або текст.

// Ця функція createGalleryItemsMarkup приймає масив об'єктів items, кожен з яких представляє елемент галереї з певними властивостями: 
// preview (шлях до мініатюри зображення), original (шлях до оригінального зображення) та description (опис зображення). 
// Функція виконує такі дії:
// 1.Використовує метод масиву .map() для перетворення кожного об'єкта в масиві items у рядок HTML, що представляє елемент галереї.
// 2.Для кожного об'єкта item у масиві items створюється рядок, що містить HTML-розмітку.

// Ця розмітка є елементом галереї із зображенням та посиланням на оригінальне зображення. Шляхи до мініатюри, оригінального зображення та опису 
// передаються в атрибути src, data-source і alt відповідно.
// 1.Використовує метод масиву .join("") для об'єднання всіх створених рядків в один великий рядок HTML.
// 2.Повертає цей великий рядок HTML, який є розміткою для всіх елементів галереї в масиві items.
// Таким чином, функція createGalleryItemsMarkup генерує розмітку елементів галереї на основі даних з масиву items.
function createGalleryItemsMarkup(items) {
    return items
    .map(
        ({preview, original, description}) => {
            return `<div class = "gallery__item">
                <a class = "gallery__link" href = ${original}>
                    <img
                        class = "gallery__image"
                        src = "${preview}"
                        data-source = ${original}
                        alt = ${description}
                    />
                </a>
            </div>`
        }
    )
    .join("");
}
//Метод масивів join(delimiter) об'єднує елементи масиву у рядок. У рядку елементи будуть розділені символом або
//групою символів, зазначених в delimiter.

// Ця функція створює екземпляр модального вікна за допомогою бібліотеки BasicLightbox. Ось покроковий опис дій, які виконує ця функція:
//1.Створюється змінна instance, у якій зберігатиметься екземпляр модального вікна.
//2.У функцію basicLightbox.create() передається наступна розмітка у вигляді рядка: <img width="1280" height="auto" src="">
// Ця розмітка є HTML-елементом <img>, який використовується всередині модального вікна. В даному випадку атрибути width, height і src порожні, 
// оскільки вони повинні бути заповнені динамічно при відображенні конкретного зображення.
// 1.Другим аргументом функції basicLightbox.create() передається об'єкт із двома колбеками:
// onShow: (instance) => {...} - Цей колбек викликається, коли модальне вікно відображається. 
// Усередині колбека додається слухач подій keydown, який викликає функцію onEscKeyPress при натисканні клавіші "Escape".
// onClse: (instance) => {...} - Цей колбек викликається, коли модальне вікно закривається. 
// Усередині колбека видаляється слухач подій keydown, який було додано під час відкриття модального вікна.
// 2.Зрештою, змінна instance міститиме екземпляр модального вікна, який можна використовувати для відкриття та закриття модального вікна у 
// відповідь на різні події.

const instance = basicLightbox.create(
    `<img width = "1280" height = "auto" src = "">`,
    {
        onShow: (instance) => {
            window.addEventListener('keydown', onEscKeyPress);
        },
        onClose: (instance) => {
            window.removeEventListener('keydown', onEscKeyPress);
        },
    }
);

// Ці дві функції onImgClick і onEscKeyPress призначені для керування модальним вікном, створеним за допомогою бібліотеки BasicLightbox, 
// на основі дій користувача.
// 1. onImgClick(e) - Ця функція призначена для обробки події кліка на зображенні, яке має відкривати модальне вікно. 
//    Ось що вона робить:
//     - e.preventDefault(); - Скасує стандартну поведінку браузера для події click, щоб запобігти переходу за посиланням або інші стандартні дії.
//     - const datasetSource = e.target.dataset.source; - Витягує значення атрибута data-source з елемента, яким стався клік. 
//         Це передбачає, що в HTML-розмітці зображення містять цей атрибут шляхом до оригінального зображення.
//     - if (!datasetSource) return; - Перевіряє, чи є значення data-source в елементі. Якщо немає, функція завершує виконання, 
//         не відкриваючи модальне вікно.
//     - instance.element().querySelector('img').src = datasetSource; - Встановлює атрибут src зображення всередині модального вікна, 
//         що дорівнює значенням data-source з клікнутого зображення.
//     - instance.show(); - Відкриває модальне вікно із оновленим зображенням.

// 2. onEscKeyPress(e) - Ця функція призначена для обробки події натискання клавіші Escape (Esc). Ось що вона робить:
//     - if (e.code !== 'Escape') return; - Перевіряє, чи натиснута клавіша "Escape". Якщо це не так, функція завершує виконання.
//     - instance.close(); - Закриває модальне вікно, викликаючи метод close() на екземплярі модального вікна instance, коли натиснуто клавішу 
//     "Escape".
// Таким чином, ці функції забезпечують можливість відкривати модальне вікно при натисканні на зображення і закривати його при натисканні клавіші 
//     "Escape".
function onImgClick(e) {
    e.preventDefault();
    const datasetSource = e.target.dataset.source;
    if (!datasetSource) return;
    instance.element().querySelector('img').src = datasetSource;
    instance.show();
  }

function onEscKeyPress(e) {
    if (e.code !== 'Escape') return;
    instance.close();
  }